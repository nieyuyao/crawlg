[{"desc":"","syntax":"gl.canvas;","returnVal":"Either a HTMLCanvasElement orÂ OffscreenCanvas object or null.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/canvas"},{"desc":"","syntax":"void WebGLRenderingContext.commit()","returnVal":"","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/commit"},{"desc":"","syntax":"gl.drawingBufferWidth;","returnVal":"","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawingBufferWidth"},{"desc":"","syntax":"gl.drawingBufferHeight;","returnVal":"","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawingBufferHeight"},{"desc":"","syntax":"gl.getContextAttributes();","returnVal":"A WebGLContextAttributes object that contains the actual context parameters, or null if the context is lost.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getContextAttributes"},{"desc":"","syntax":"gl.isContextLost();","returnVal":"A Boolean. True if the context is lost, false otherwise.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isContextLost"},{"desc":"","syntax":"void gl.scissor(x, y, width, height);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/scissor"},{"desc":"","syntax":"void gl.viewport(x, y, width, height);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/viewport"},{"desc":"","syntax":"void gl.activeTexture(texture);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/activeTexture"},{"desc":"","syntax":"void gl.blendColor(red, green, blue, alpha);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendColor"},{"desc":"","syntax":"void gl.blendEquation(mode);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendEquation"},{"desc":"","syntax":"void gl.blendEquationSeparate(modeRGB, modeAlpha);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendEquationSeparate"},{"desc":"","syntax":"void gl.blendFunc(sfactor, dfactor);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendFunc"},{"desc":"","syntax":"void gl.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendFuncSeparate"},{"desc":"","syntax":"void gl.clearColor(red, green, blue, alpha);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/clearColor"},{"desc":"","syntax":"void gl.clearDepth(depth);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/clearDepth"},{"desc":"","syntax":"void gl.clearStencil(s);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/clearStencil"},{"desc":"","syntax":"void gl.colorMask(red, green, blue, alpha);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/colorMask"},{"desc":"","syntax":"void gl.cullFace(mode);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/cullFace"},{"desc":"","syntax":"void gl.depthFunc(func);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/depthFunc"},{"desc":"","syntax":"void gl.depthMask(flag);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/depthMask"},{"desc":"","syntax":"void gl.depthRange(zNear, zFar);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/depthRange"},{"desc":"","syntax":"void gl.disable(cap);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/disable"},{"desc":"","syntax":"void gl.enable(cap);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/enable"},{"desc":"","syntax":"void gl.frontFace(mode);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/frontFace"},{"desc":"","syntax":"any gl.getParameter(pname);\n","returnVal":"Depends on the parameter.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getParameter"},{"desc":"","syntax":"GLenum gl.getError();\n","returnVal":"","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getError"},{"desc":"","syntax":"void gl.hint(target, mode);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/hint"},{"desc":"","syntax":"GLboolean gl.isEnabled(cap);\n","returnVal":"A GLboolean indicating if the capability cap is enabled (true), or not (false).","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isEnabled"},{"desc":"","syntax":"void gl.lineWidth(width);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/lineWidth"},{"desc":"","syntax":"void gl.pixelStorei(pname, param);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/pixelStorei"},{"desc":"","syntax":"void gl.polygonOffset(factor, units);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/polygonOffset"},{"desc":"","syntax":"void gl.sampleCoverage(value, invert);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/sampleCoverage"},{"desc":"","syntax":"void gl.stencilFunc(func, ref, mask);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilFunc"},{"desc":"","syntax":"void gl.stencilFuncSeparate(face, func, ref, mask);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilFuncSeparate"},{"desc":"","syntax":"void gl.stencilMask(mask);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilMask"},{"desc":"","syntax":"void gl.stencilMaskSeparate(face, mask);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilMaskSeparate"},{"desc":"","syntax":"void gl.stencilOp(fail, zfail, zpass);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilOp"},{"desc":"","syntax":"void gl.stencilOpSeparate(face, fail, zfail, zpass);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilOpSeparate"},{"desc":"","syntax":"void gl.bindBuffer(target, buffer);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindBuffer"},{"desc":"","syntax":"// WebGL1: \nvoid gl.bufferData(target, size, usage); \nvoid gl.bufferData(target, ArrayBuffer? srcData, usage); \nvoid gl.bufferData(target, ArrayBufferView srcData, usage); \n\n// WebGL2: \nvoid gl.bufferData(target, ArrayBufferView srcData, usage, srcOffset, length);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData"},{"desc":"","syntax":"// WebGL1: \nvoid gl.bufferSubData(target, offset, ArrayBuffer srcData); \nvoid gl.bufferSubData(target, offset, ArrayBufferView srcData); \n\n// WebGL2: \nvoid gl.bufferSubData(target, dstByteOffset, ArrayBufferView srcData, srcOffset, length);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferSubData"},{"desc":"","syntax":"WebGLBuffer gl.createBuffer();\n","returnVal":"A WebGLBuffer storing data such as vertices or colors.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createBuffer"},{"desc":"","syntax":"void gl.deleteBuffer(buffer);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteBuffer"},{"desc":"","syntax":"any gl.getBufferParameter(target, pname);\n","returnVal":"Depends on the requested information (as specified with pname). Either a GLint or a GLenum.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getBufferParameter"},{"desc":"","syntax":"GLboolean gl.isBuffer(buffer);\n","returnVal":"A GLboolean indicating whether or not the buffer is valid.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isBuffer"},{"desc":"","syntax":"void gl.bindFramebuffer(target, framebuffer);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindFramebuffer"},{"desc":"","syntax":"GLenum gl.checkFramebufferStatus(target);\n","returnVal":"A GLenum indicating the completeness status of the framebuffer or 0 if an error occurs. Possible enum return values:","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/checkFramebufferStatus"},{"desc":"","syntax":"WebGLFramebuffer gl.createFramebuffer();\n","returnVal":"A WebGLFramebuffer object.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createFramebuffer"},{"desc":"","syntax":"void gl.deleteFramebuffer(framebuffer);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteFramebuffer"},{"desc":"","syntax":"void gl.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/framebufferRenderbuffer"},{"desc":"","syntax":"void gl.framebufferTexture2D(target, attachment, textarget, texture, level);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/framebufferTexture2D"},{"desc":"","syntax":"any gl.getFramebufferAttachmentParameter(target, attachment, pname);\n","returnVal":"Depends on the requested information (as specified with pname). Either a GLint, a GLenum, a WebGLRenderbuffer, or a WebGLTexture.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getFramebufferAttachmentParameter"},{"desc":"","syntax":"GLboolean gl.isFramebuffer(framebuffer);\n","returnVal":"A GLboolean indicating whether or not the frame buffer is valid.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isFramebuffer"},{"desc":"","syntax":"// WebGL1: \nvoid gl.readPixels(x, y, width, height, format, type, pixels); \n\n// WebGL2: \nvoid gl.readPixels(x, y, width, height, format, type, GLintptr offset); \nvoid gl.readPixels(x, y, width, height, format, type, ArrayBufferView pixels, GLuint dstOffset);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/readPixels"},{"desc":"","syntax":"void gl.bindRenderbuffer(target, renderbuffer);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindRenderbuffer"},{"desc":"","syntax":"WebGLRenderbuffer gl.createRenderbuffer();\n","returnVal":"A WebGLRenderbuffer object that stores data such an image, or can be source or target of an rendering operation.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createRenderbuffer"},{"desc":"","syntax":"void gl.deleteRenderbuffer(renderbuffer);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteRenderbuffer"},{"desc":"","syntax":"any gl.getRenderbufferParameter(target, pname);\n","returnVal":"Depends on the requested information (as specified with pname). Either a GLint or a GLenum.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getRenderbufferParameter"},{"desc":"","syntax":"GLboolean gl.isRenderbuffer(renderbuffer);\n","returnVal":"A GLboolean indicating whether or not the renderbuffer is valid.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isRenderbuffer"},{"desc":"","syntax":"void gl.renderbufferStorage(target, internalFormat, width, height);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/renderbufferStorage"},{"desc":"","syntax":"void gl.bindTexture(target, texture);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindTexture"},{"desc":"","syntax":"// WebGL 1:\nvoid gl.compressedTexImage2D(target, level, internalformat, width, height, border, ArrayBufferView? pixels);\n\n// Additionally available in WebGL 2: \n// read from buffer bound to gl.PIXEL_UNPACK_BUFFER\nvoid gl.compressedTexImage2D(target, level, internalformat, width, height, border, GLsizei imageSize, GLintptr offset); \nvoid gl.compressedTexImage2D(target, level, internalformat, width, height, border,\n                             ArrayBufferView srcData, optional srcOffset, optional srcLengthOverride);\n\n // read from buffer bound to gl.PIXEL_UNPACK_BUFFER\nvoid gl.compressedTexImage3D(target, level, internalformat, width, height, depth, border, GLsizei imageSize, GLintptr offset); \nvoid gl.compressedTexImage3D(target, level, internalformat, width, height, depth, border, \n                             ArrayBufferView srcData, optional srcOffset, optional srcLengthOverride);","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compressedTexImage2D"},{"desc":"","syntax":"// WebGL 1:\nvoid gl.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n\n// Additionally available in WebGL 2:\nvoid gl.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, offset); \nvoid gl.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, ArrayBufferView srcData, optional srcOffset, optional srcLengthOverride);\n\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D"},{"desc":"","syntax":"void gl.copyTexImage2D(target, level, internalformat, x, y, width, height, border);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/copyTexImage2D"},{"desc":"","syntax":"void gl.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/copyTexSubImage2D"},{"desc":"","syntax":"WebGLTexture gl.createTexture();\n","returnVal":"A WebGLTexture object to which images can be bound to.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createTexture"},{"desc":"","syntax":"void gl.deleteTexture(texture);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteTexture"},{"desc":"","syntax":"void gl.generateMipmap(target);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/generateMipmap"},{"desc":"","syntax":"any gl.getTexParameter(target, pname);\n","returnVal":"Returns the requested texture information (as specified with pname). If an error occurs, null is returned.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getTexParameter"},{"desc":"","syntax":"GLboolean gl.isTexture(texture);\n","returnVal":"A GLboolean indicating whether or not the texture is valid.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isTexture"},{"desc":"","syntax":"// WebGL1:\nvoid gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView? pixels);\nvoid gl.texImage2D(target, level, internalformat, format, type, ImageData? pixels);\nvoid gl.texImage2D(target, level, internalformat, format, type, HTMLImageElement? pixels);\nvoid gl.texImage2D(target, level, internalformat, format, type, HTMLCanvasElement? pixels);\nvoid gl.texImage2D(target, level, internalformat, format, type, HTMLVideoElement? pixels);\nvoid gl.texImage2D(target, level, internalformat, format, type, ImageBitmap? pixels);\n\n// WebGL2:\nvoid gl.texImage2D(target, level, internalformat, width, height, border, format, type, GLintptr offset);\nvoid gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLCanvasElement source);\nvoid gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLImageElement source); \nvoid gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLVideoElement source); \nvoid gl.texImage2D(target, level, internalformat, width, height, border, format, type, ImageBitmap source);\nvoid gl.texImage2D(target, level, internalformat, width, height, border, format, type, ImageData source);\nvoid gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView srcData, srcOffset);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D"},{"desc":"","syntax":"// WebGL 1:\nvoid gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, ArrayBufferView? pixels);\nvoid gl.texSubImage2D(target, level, xoffset, yoffset, format, type, ImageData? pixels);\nvoid gl.texSubImage2D(target, level, xoffset, yoffset, format, type, HTMLImageElement? pixels);\nvoid gl.texSubImage2D(target, level, xoffset, yoffset, format, type, HTMLCanvasElement? pixels);\nvoid gl.texSubImage2D(target, level, xoffset, yoffset, format, type, HTMLVideoElement? pixels);\nvoid gl.texSubImage2D(target, level, xoffset, yoffset, format, type, ImageBitmap? pixels);\n\n// WebGL 2:\nvoid gl.texSubImage2D(target, level, xoffset, yoffset, format, type, GLintptr offset);\nvoid gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, HTMLCanvasElement source);\nvoid gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, HTMLImageElement source);\nvoid gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, HTMLVideoElement source); \nvoid gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, ImageBitmap source); \nvoid gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, ImageData source);\nvoid gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, ArrayBufferView srcData, srcOffset);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texSubImage2D"},{"desc":"","syntax":"void gl.texParameterf(GLenum target, GLenum pname, GLfloat param);\nvoid gl.texParameteri(GLenum target, GLenum pname, GLint param);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter"},{"desc":"","syntax":"void gl.texParameterf(GLenum target, GLenum pname, GLfloat param);\nvoid gl.texParameteri(GLenum target, GLenum pname, GLint param);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter"},{"desc":"","syntax":"void gl.attachShader(program, shader);\n","returnVal":"","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/attachShader"},{"desc":"","syntax":"void gl.bindAttribLocation(program, index, name);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindAttribLocation"},{"desc":"","syntax":"void gl.compileShader(shader);\n","returnVal":"","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compileShader"},{"desc":"","syntax":"WebGLProgram gl.createProgram();\n","returnVal":"A WebGLProgram object that is a combination of two compiled WebGLShaders consisting of a vertex shader and a fragment shader (both written in GLSL). These are then linked into a usable program..","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createProgram"},{"desc":"","syntax":"WebGLShader gl.createShader(type);\n","returnVal":"","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createShader"},{"desc":"","syntax":"void gl.deleteProgram(program);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteProgram"},{"desc":"","syntax":"void gl.deleteShader(shader);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteShader"},{"desc":"","syntax":"void gl.detachShader(program, shader);\n","returnVal":"","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/detachShader"},{"desc":"","syntax":"sequence<WebGLShader> gl.getAttachedShaders(program);\n","returnVal":"An Array of WebGLShader objects that are attached to the given WebGLProgram.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getAttachedShaders"},{"desc":"","syntax":"any gl.getProgramParameter(program, pname);\n","returnVal":"Returns the requested program information (as specified with pname).","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getProgramParameter"},{"desc":"","syntax":"gl.getProgramInfoLog(program);","returnVal":"A DOMString that contains diagnostic messages, warning messages, and other information about the last linking or validation operation. When a WebGLProgram object is initially created, its information log will be a string of length 0.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getProgramInfoLog"},{"desc":"","syntax":"any gl.getShaderParameter(shader, pname);\n","returnVal":"Returns the requested shader information (as specified with pname).","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getShaderParameter"},{"desc":"","syntax":"WebGLShaderPrecisionFormat gl.getShaderPrecisionFormat(shaderType, precisionType);\n","returnVal":"A WebGLShaderPrecisionFormat object or null, if an error occurs.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getShaderPrecisionFormat"},{"desc":"","syntax":"gl.getShaderInfoLog(shader);","returnVal":"A DOMString that contains diagnostic messages, warning messages, and other information about the last compile operation. When a WebGLShader object is initially created, its information log will be a string of length 0.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getShaderInfoLog"},{"desc":"","syntax":"DOMString gl.getShaderSource(shader);\n","returnVal":"A DOMString containing the source code of the shader.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getShaderSource"},{"desc":"","syntax":"GLboolean gl.isProgram(program);\n","returnVal":"A GLboolean indicating whether or not the program is valid.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isProgram"},{"desc":"","syntax":"GLboolean gl.isShader(shader);\n","returnVal":"A GLboolean indicating whether or not the shader is valid.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isShader"},{"desc":"","syntax":"void gl.linkProgram(program);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/linkProgram"},{"desc":"","syntax":"void gl.shaderSource(shader, source);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/shaderSource"},{"desc":"","syntax":"void gl.useProgram(program);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/useProgram"},{"desc":"","syntax":"void gl.validateProgram(program);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/validateProgram"},{"desc":"","syntax":"void gl.disableVertexAttribArray(index);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/disableVertexAttribArray"},{"desc":"","syntax":"void gl.enableVertexAttribArray(index);\n","returnVal":"undefined.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/enableVertexAttribArray"},{"desc":"","syntax":"WebGLActiveInfo gl.getActiveAttrib(program,index);\n","returnVal":"A WebGLActiveInfo object.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getActiveAttrib"},{"desc":"","syntax":"WebGLActiveInfo WebGLRenderingContext.getActiveUniform(program, index);\n","returnVal":"A WebGLActiveInfo object describing the uniform.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getActiveUniform"},{"desc":"","syntax":"GLint gl.getAttribLocation(program, name);\n","returnVal":"A GLint number indicating the location of the variable name if found. Returns -1 otherwise.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getAttribLocation"},{"desc":"","syntax":"any gl.getUniform(program, location);\n","returnVal":"The returned type depends on the uniform type:","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getUniform"},{"desc":"","syntax":"WebGLUniformLocation = WebGLRenderingContext.getUniformLocation(program, name);\n","returnVal":"A WebGLUniformLocation value indicating the location of the named variable, if it exists. If the specified variable doesn't exist, null is returned instead.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getUniformLocation"},{"desc":"","syntax":"any gl.getVertexAttrib(index, pname);\n","returnVal":"Returns the requested vertex attribute information (as specified with pname).","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getVertexAttrib"},{"desc":"","syntax":"GLintptr gl.getVertexAttribOffset(index, pname);\n","returnVal":"A GLintptr indicating the address of the vertex attribute.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getVertexAttribOffset"},{"desc":"","syntax":"void gl.uniform1f(location, v0);\nvoid gl.uniform1fv(location, value);\nvoid gl.uniform1i(location, v0);\nvoid gl.uniform1iv(location, value);\n\nvoid gl.uniform2f(location, v0, v1);\nvoid gl.uniform2fv(location, value);\nvoid gl.uniform2i(location, v0, v1);\nvoid gl.uniform2iv(location, value);\n\nvoid gl.uniform3f(location, v0, v1, v2);\nvoid gl.uniform3fv(location, value);\nvoid gl.uniform3i(location, v0, v1, v2);\nvoid gl.uniform3iv(location, value);\n\nvoid gl.uniform4f(location, v0, v1, v2, v3);\nvoid gl.uniform4fv(location, value);\nvoid gl.uniform4i(location, v0, v1, v2, v3);\nvoid gl.uniform4iv(location, value);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform"},{"desc":"","syntax":"WebGLRenderingContext.uniformMatrix2fv(location, transpose, value);\nWebGLRenderingContext.uniformMatrix3fv(location, transpose, value);\nWebGLRenderingContext.uniformMatrix4fv(location, transpose, value); \n","returnVal":"undefined","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniformMatrix"},{"desc":"","syntax":"void gl.vertexAttrib1f(index, v0);\nvoid gl.vertexAttrib2f(index, v0, v1);\nvoid gl.vertexAttrib3f(index, v0, v1, v2);\nvoid gl.vertexAttrib4f(index, v0, v1, v2, v3);\n\nvoid gl.vertexAttrib1fv(index, value);\nvoid gl.vertexAttrib2fv(index, value);\nvoid gl.vertexAttrib3fv(index, value);\nvoid gl.vertexAttrib4fv(index, value);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib"},{"desc":"","syntax":"void gl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer"},{"desc":"","syntax":"void gl.clear(mask);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/clear"},{"desc":"","syntax":"void gl.drawArrays(mode, first, count);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawArrays"},{"desc":"","syntax":"void gl.drawElements(mode, count, type, offset);\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements"},{"desc":"","syntax":"void gl.finish();\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/finish"},{"desc":"","syntax":"void gl.flush();\n","returnVal":"None.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/flush"},{"desc":"","syntax":"gl.getSupportedExtensions();","returnVal":"An Array of strings with all the supported WebGL extensions.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getSupportedExtensions"},{"desc":"","syntax":"gl.getExtension(name);","returnVal":"A WebGL extension object, or null if name does not match (case-insensitive) to one of the strings in WebGLRenderingContext.getSupportedExtensions.","url":"developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getExtension"}]